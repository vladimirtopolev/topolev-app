{"version":3,"sources":["webpack:///./src/modules/table/store/actions/types.tsx","webpack:///./src/modules/table/store/reducers/tables.tsx","webpack:///./src/modules/table/store/reducers/index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","GET_TABLE_ACTION","GET_TABLE_HEADERS_ACTION","GET_TABLE_ROWS_ACTION","GET_TABLE_ROW_ACTION","UPDATE_TABLE_ROW_ACTION","SAVE_TABLE_ROW_ACTIONS","DELETE_TABLE_ROW_ACTION","reducers_tables","state","action","type","types","status","asyncActions","SUCCEEDED","requestTableSuccess","requestTableHeadersSuccess","requestTableRowsSuccess","requestDeleteTableRowSuccess","entities","payload","tableName","params","__assign","_a","headerIds","table","headers","rowIds","rows","_b","rowId","filter","id","getTable","rootReducer","Object","redux","tables","asyncStatuses","reducers_assign","reducers_getTable","constants","reducers_getTableMeta","tableMeta","name","title","getTableMeta","reducers_getTableHeaders","lodash","map","headerKey","getTableHeaders","reducers_getTableRows","rowKey","row","cells","cellKey","cell","header","getTableRows","reducers_getTableRow","undefined","getTableRow","getAsyncTaskStatuses","isLoadingTasks","tasks","some","actionKey"],"mappings":"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","file":"33.bundle.js","sourcesContent":["export const GET_TABLE_ACTION = 'GET_TABLE_ACTION';\nexport const GET_TABLE_HEADERS_ACTION = 'GET_TABLE_HEADERS_ACTION';\nexport const GET_TABLE_ROWS_ACTION = 'GET_TABLE_ROWS_ACTION';\n\nexport const GET_TABLE_ROW_ACTION = 'GET_TABLE_ROW_ACTION';\n\nexport const UPDATE_TABLE_ROW_ACTION = 'UPDATE_TABLE_ROW_ACTION';\nexport const SAVE_TABLE_ROW_ACTIONS = 'SAVE_TABLE_ROW_ACTIONS';\n\nexport const DELETE_TABLE_ROW_ACTION = 'DELETE_TABLE_ROW_ACTION';\n","import {Reducer} from 'redux';\nimport * as _ from 'lodash';\nimport {\n    GET_TABLE_ACTION,\n    GET_TABLE_HEADERS_ACTION,\n    GET_TABLE_ROW_ACTION,\n    GET_TABLE_ROWS_ACTION,\n    SAVE_TABLE_ROW_ACTIONS,\n    UPDATE_TABLE_ROW_ACTION,\n    DELETE_TABLE_ROW_ACTION\n} from '../actions/types';\nimport {Params} from '../actions/actions';\n\nimport {AsyncAction, AsyncActionStatus, SucceededAsyncAction} from '../../../../utilities/asyncActions';\nimport {NormalizedTableResponse, NormalizedTableHeadersResponse, NormalizedTableRowsResponse} from '../../schema/table';\n\ntype GetTableActionSuccess = SucceededAsyncAction<typeof GET_TABLE_ACTION, NormalizedTableResponse, Params>;\ntype GetTableHeadersActionSuccess = SucceededAsyncAction<typeof GET_TABLE_HEADERS_ACTION, NormalizedTableHeadersResponse, Params>;\n\ntype GetTableRowsActionSuccess = SucceededAsyncAction<typeof GET_TABLE_ROWS_ACTION, NormalizedTableRowsResponse, Params>;\ntype GetTableRowActionSuccess = SucceededAsyncAction<typeof GET_TABLE_ROW_ACTION, NormalizedTableRowsResponse, Params>;\ntype SaveTableRowActionSuccess = SucceededAsyncAction<typeof SAVE_TABLE_ROW_ACTIONS, NormalizedTableRowsResponse, Params>;\ntype UpdateTableRowActionSuccess = SucceededAsyncAction<typeof UPDATE_TABLE_ROW_ACTION, NormalizedTableRowsResponse, Params>;\ntype TableRowActions =\n    GetTableRowsActionSuccess\n    | GetTableRowActionSuccess\n    | SaveTableRowActionSuccess\n    | UpdateTableRowActionSuccess;\n\ntype DeleteTableActionSuccess = SucceededAsyncAction<typeof DELETE_TABLE_ROW_ACTION, any, Params>;\n\nconst tables: Reducer<any, AsyncAction<any, any>> = (state = {}, action) => {\n    if (action.type === GET_TABLE_ACTION) {\n        switch (action.status) {\n            case AsyncActionStatus.SUCCEEDED:\n                return requestTableSuccess(state, action as GetTableActionSuccess);\n            default:\n                return state;\n        }\n    }\n    if (action.type === GET_TABLE_HEADERS_ACTION) {\n        switch (action.status) {\n            case AsyncActionStatus.SUCCEEDED:\n                return requestTableHeadersSuccess(state, action as GetTableHeadersActionSuccess);\n            default:\n                return state;\n        }\n    }\n    if (action.type === GET_TABLE_ROWS_ACTION ||\n        action.type === GET_TABLE_ROW_ACTION ||\n        action.type === SAVE_TABLE_ROW_ACTIONS ||\n        action.type === UPDATE_TABLE_ROW_ACTION) {\n        switch (action.status) {\n            case AsyncActionStatus.SUCCEEDED:\n                return requestTableRowsSuccess(state, action as TableRowActions);\n            default:\n                return state;\n        }\n    }\n\n    if (action.type === DELETE_TABLE_ROW_ACTION) {\n        switch (action.status) {\n            case AsyncActionStatus.SUCCEEDED:\n                return requestDeleteTableRowSuccess(state, action as DeleteTableActionSuccess);\n            default:\n                return state;\n        }\n    }\n\n    return state;\n};\n\nexport default tables;\n\nconst requestTableSuccess = (state: any, action: GetTableActionSuccess) => {\n    const {entities} = action.payload;\n    const {tableName} = action.params;\n    return {\n        ...state,\n        [tableName]: {\n            ...entities,\n            headerIds: entities.table[tableName].headers,\n            rowIds: entities.table[tableName].rows\n        }\n    };\n};\n\nconst requestTableHeadersSuccess = (state: any, action: GetTableHeadersActionSuccess) => {\n    const {entities} = action.payload;\n    const {tableName} = action.params;\n    return {\n        ...state,\n        [tableName]: {\n            ...state[tableName],\n            ...entities,\n            headerIds: entities.table[tableName].headers\n        }\n    };\n};\n\nconst requestTableRowsSuccess = (state: any, action: TableRowActions) => {\n    const {entities} = action.payload;\n    const {tableName} = action.params;\n    return {\n        ...state,\n        [tableName]: {\n            ...state[tableName],\n            ...entities,\n            rowIds: entities.table[tableName].rows\n        }\n    };\n};\n\nconst requestDeleteTableRowSuccess = (state: any, action: DeleteTableActionSuccess) => {\n    const {tableName, rowId} = action.params;\n    return {\n        ...state,\n        [tableName]: {\n            ...state[tableName],\n            rowIds: state[tableName].rowIds.filter((id: string) => id !== rowId)\n        }\n    };\n};\n\n//selectors\nexport const getTable = (state: any, tableName: string) => state[tableName];\n\nexport const getTableMeta = (state: any, tableName: string) => {\n    const tableMeta = getTable(state, tableName);\n    return tableMeta\n        ? tableMeta.table[tableName]\n        : {\n            name: tableName,\n            title: ''\n        };\n};\n\nexport const getTableHeaders = (state: any, tableName: string) => {\n    const tableMeta = getTable(state, tableName);\n    return _.get(tableMeta, 'headerIds', [])\n        .map((headerKey: any) => tableMeta.headers[headerKey]);\n};\n\nexport const getTableRows = (state: any, tableName: string) => {\n    const tableMeta = getTable(state, tableName);\n    return _.get(tableMeta, 'rowIds', [])\n        .map((rowKey: any) => tableMeta.rows[rowKey])\n        .map((row: any) => ({\n            ...row,\n            cells: row.cells.map((cellKey: any) => {\n                const cell = tableMeta.cells[cellKey];\n                return {\n                    ...cell,\n                    type: tableMeta.headers[cell.header]\n                };\n            })\n        }));\n};\n\n\nexport const getTableRow = (state: any, tableName: string, rowId: string) => {\n    const tableMeta = getTable(state, tableName);\n\n    const row = _.get(tableMeta, `rows.${rowId}`);\n    return row\n        ? {\n            ...row,\n            cells: row.cells.map((cellKey: any) => {\n                const cell = tableMeta.cells[cellKey];\n                return {\n                    ...cell,\n                    type: tableMeta.headers[cell.header]\n                };\n            })\n        }\n        : undefined;\n};\n","import tables, * as fromTables from './tables';\nimport {combineReducers} from 'redux';\nimport {AsyncAction} from '../../../../utilities/asyncActions';\nimport {GET_TABLE_ACTION, GET_TABLE_HEADERS_ACTION, GET_TABLE_ROWS_ACTION} from '../actions/types';\nimport {MODULE_NAME} from '../../constants';\n\nconst asyncStatuses = (state: any = {}, action: AsyncAction<typeof GET_TABLE_ACTION>) => {\n    if (\n        action.type === GET_TABLE_ACTION\n        || action.type === GET_TABLE_HEADERS_ACTION\n        || action.type === GET_TABLE_ROWS_ACTION\n    ) {\n        return {...state, [action.type]: action.status};\n    }\n    return state;\n};\n\nconst rootReducer = combineReducers({\n    tables,\n    asyncStatuses\n});\n\nexport default rootReducer;\n\nexport type TableModuleState = ReturnType<typeof rootReducer>;\n\n\n// selectors\nexport const getTable = (state: any, tableName: string) => fromTables.getTable(state[MODULE_NAME].tables, tableName);\nexport const getTableMeta  =(state: any, tableName: string) => fromTables.getTableMeta(state[MODULE_NAME].tables, tableName);\nexport const getTableHeaders = (state:any, tableName: string) => fromTables.getTableHeaders(state[MODULE_NAME].tables, tableName);\nexport const getTableRows = (state:any, tableName: string) => fromTables.getTableRows(state[MODULE_NAME].tables, tableName);\nexport const getTableRow = (state:any, tableName: string, rowId: string) => fromTables.getTableRow(state[MODULE_NAME].tables, tableName, rowId);\n\nexport const getAsyncTaskStatuses = (state: any) => state[MODULE_NAME].asyncStatuses;\n\n\nexport const isLoadingTasks = (state: any, tasks: string[]) => {\n    return tasks.some(actionKey => state[MODULE_NAME].asyncStatuses[actionKey] === 'STARTED')\n}\n"],"sourceRoot":""}