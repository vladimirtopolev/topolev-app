{"version":3,"sources":["webpack:///./src/modules/table/components/row/row.component.styles.css?a834","webpack:///./src/modules/table/components/row/row.component.tsx","webpack:///./src/modules/table/components/row/row-container.component.tsx"],"names":["module","exports","Row","Row__backBtn","Row__container","Row__toolbar","Cell","Cell__title","Cell__value","getRow","headers","row","_id","undefined","cells","map","header","value","row_component","_a","tableName","rowId","goBack","locale","getTableHeaders","getTableRow","localeItem","saveTableRow","updateTableRow","isLoading","_b","Object","react","isEditMode","changeEditMode","_c","rowInMemory","changeRowInMemory","changeCell","headerId","__assign","cell","newValue","lodash","key","locales","reduce","memo","saveRow","with_spinner_render_props_component","className","row_component_styles","onClick","find","c","console","log","name","cell_component","notLocalized","__webpack_exports__","react_router","es","state","ownProps","match","params","reducers","taskStatuses","l","dispatch","actions","history","push"],"mappings":"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","file":"27.bundle.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"Row___6pQfT\",\"Row__backBtn\":\"Row__backBtn___2jt9w\",\"Row__container\":\"Row__container___1kSkx\",\"Row__toolbar\":\"Row__toolbar___2j2e0\",\"Cell\":\"Cell___2iLFv\",\"Cell__title\":\"Cell__title___11KMF\",\"Cell__value\":\"Cell__value___1wEq8\"};","import * as React from 'react';\nimport {Fragment} from 'react';\nimport {useState, useEffect} from 'react';\nimport {Header, Locale, Row} from '../../schema/models';\nimport Cell from '../cells/cell.component';\nimport {TableRowContainerProps} from './row-container.component';\nimport WithSpinner from '../../../../common/helpers/with-spinner.render-props-component';\nimport * as styles from './row.component.styles.css';\nimport {LOCALES} from '../../../../config/locales';\nimport * as _ from 'lodash';\n\nconst getRow = (headers: Header[], row: Row): Row => {\n    return row || {\n        _id: undefined,\n        cells: headers\n            ? headers.map(header => ({\n                _id: undefined,\n                header,\n                value: ''\n            }))\n            : []\n    };\n};\n\nconst Row = ({tableName, rowId, headers, row, locale, goBack, getTableHeaders, getTableRow, localeItem, saveTableRow, updateTableRow, isLoading}: TableRowContainerProps) => {\n    const [isEditMode, changeEditMode] = useState<boolean>(false);\n    const [rowInMemory, changeRowInMemory] = useState<Row>(getRow(headers, row));\n\n    useEffect(() => {\n        getTableHeaders();\n        rowId !== 'new' && getTableRow();\n    }, []);\n\n    useEffect(() => {\n        changeRowInMemory(getRow(headers, row));\n    }, [headers, row]);\n\n    const changeCell = (headerId: string, value: any, locale?: Locale) => {\n        changeRowInMemory({\n            ...row,\n            cells: rowInMemory.cells.map(cell => {\n                if (cell.header._id !== headerId) {\n                    return cell;\n                }\n                const newValue = locale\n                    ? _.isObject(cell.value)\n                        ? {...cell.value, [locale.key]: value}\n                        : LOCALES.reduce((memo, locale) => ({...memo, [locale.key]: value}), {})\n                    : value;\n                return {...cell, value: newValue};\n            })\n        });\n    };\n\n    const saveRow = () => {\n        rowId === 'new'\n            ? saveTableRow(rowInMemory)\n            : updateTableRow(rowInMemory);\n        goBack();\n    };\n\n    return (\n        <WithSpinner isLoading={isLoading}>\n            {() => (\n                <div className={styles.Row}>\n                    {isEditMode\n                        ? <button className={styles.Row__backBtn}\n                                  onClick={() => changeEditMode(false)}>\n                            К режиму просмотра\n                        </button>\n                        : <button className={styles.Row__backBtn}\n                                  onClick={goBack}>\n                            Назад без сохранения\n                        </button>\n                    }\n                    <div className={styles.Row__container}>\n                        {headers.map(header => {\n                            const cell = rowInMemory && rowInMemory.cells.find(c => c.header._id === header._id);\n                            console.log('NOT LOCALIZED ROW', header);\n                            return (\n                                <div key={header._id}\n                                     className={styles.Cell}>\n                                    <div className={styles.Cell__title}>{header.name}</div>\n                                    <div className={styles.Cell__value}>\n                                        {cell &&\n                                        <Cell cell={cell}\n                                              isEditMode={isEditMode}\n                                              changeCell={changeCell}\n                                              notLocalized={header.notLocalized}\n                                              locale={localeItem}/>}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                        <div className={styles.Row__toolbar}>\n                            {isEditMode\n                                ? <button onClick={saveRow}\n                                          className=\"button\">\n                                    Сохранить\n                                </button>\n                                :\n                                <Fragment>\n                                    <button onClick={() => changeEditMode(!isEditMode)}\n                                            className=\"button\">\n                                        В режим редактирования\n                                    </button>\n                                    <button onClick={saveRow}\n                                            className=\"button\">\n                                        Сохранить\n                                    </button>\n                                </Fragment>\n                            }\n                        </div>\n                    </div>\n\n                </div>\n            )}\n        </WithSpinner>\n    );\n};\n\nexport default Row;\n","import * as React from 'react';\nimport * as selectors from '../../store/reducers/index';\nimport {match, withRouter} from 'react-router';\nimport {Header, Locale, Row, TableMeta} from '../../schema/models';\nimport {getTableHeaders, getTableRow, updateTableRow, saveTableRow} from '../../store/actions/actions';\nimport {connect} from 'react-redux';\nimport TableRow from './row.component';\nimport {LOCALES} from '../../../../config/locales';\nimport {History} from 'history';\n\ninterface RouteParams {\n    tableName: string,\n    locale: string,\n    rowId: string,\n    match: match<{ [K in keyof RouteParams]?: string }>,\n    history: History,\n}\n\nexport interface TableRowContainerProps extends RouteParams {\n    dispatch: any,\n    headers: Header[],\n    row: Row,\n    tableMeta: TableMeta,\n    taskStatuses: any,\n    localeItem: Locale,\n    goBack: () => void,\n    isLoading: boolean,\n\n    getTableHeaders: () => void,\n    getTableRow: () => void,\n    saveTableRow: (row: Row) => void,\n    updateTableRow: (row: Row) => void\n}\n\nconst mapStateToProps = (state: any, ownProps: RouteParams) => {\n    const {tableName, rowId, locale} = ownProps.match.params;\n    return {\n        tableName,\n        rowId,\n        headers: selectors.getTableHeaders(state, tableName),\n        row: selectors.getTableRow(state, tableName, rowId),\n        taskStatuses: selectors.getAsyncTaskStatuses(state),\n        localeItem: LOCALES.find(l => l.key === locale),\n        isLoading: selectors.isLoadingTasks(state, ['GET_TABLE_HEADERS_ACTION'])\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any, ownProps: RouteParams) => {\n    const {tableName, rowId} = ownProps.match.params;\n    return {\n        getTableHeaders: () => dispatch(getTableHeaders(tableName)),\n        getTableRow: () => dispatch(getTableRow(tableName, rowId)),\n        saveTableRow: (row: Row) => dispatch(saveTableRow(tableName, row)),\n        updateTableRow: (row: Row) => dispatch(updateTableRow(tableName, rowId, row)),\n        goBack: () => ownProps.history.push(`/admin/tables/${tableName}`)\n    };\n};\n\nexport default withRouter<any>(connect(mapStateToProps, mapDispatchToProps)(TableRow));\n"],"sourceRoot":""}