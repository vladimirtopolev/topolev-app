{"version":3,"sources":["webpack:///../node_modules/normalizr/dist/normalizr.es.js","webpack:///./src/modules/table/schema/table.tsx","webpack:///./src/common/modules/adminTableData/service/api.tsx","webpack:///./src/common/modules/adminTableData/store/actions/actions.tsx","webpack:///./src/common/modules/adminTableData/components/admin-table-entity-rows.container.tsx"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_defineProperty","obj","value","_objectSpread","arguments","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","_inheritsLoose","subClass","superClass","create","constructor","__proto__","isImmutable","object","hasOwnProperty","_map","denormalizeImmutable","schema","input","unvisit","reduce","stringKey","has","set","get","__webpack_require__","d","__webpack_exports__","normalize$1","getDefaultGetId","idAttribute","EntitySchema","definition","options","Error","_options","_options$idAttribute","_options$mergeStrateg","mergeStrategy","entityA","entityB","_options$processStrat","processStrategy","this","_key","_getId","_idAttribute","_mergeStrategy","_processStrategy","define","_proto","entitySchema","_objectSpread2","getId","parent","merge","normalize","visit","addEntity","visitedEntities","_this","some","entity","push","processedEntity","denormalize","_this2","PolymorphicSchema","schemaAttribute","_schemaAttribute","getSchemaAttribute","isSingleSchema","inferSchema","attr","normalizeValue","normalizedValue","id","denormalizeValue","schemaKey","UnionSchema","_PolymorphicSchema","call","ValuesSchema","apply","output","index","_objectSpread3","entityOrId","validateSchema","Array","isArray","getValues","map","ArraySchema","_normalize","localSchema","_denormalize","Entity","ObjectSchema","_len","args","_len2","_key2","Union","Values","entities","existingEntity","addEntities","result","tableHeaders","table","normalizr__WEBPACK_IMPORTED_MODULE_0__","header","headers","cell","type","cells","row","rows","clientApi","a","baseURL","window","location","origin","MODULE_TABLE_DOMAIN","getAdminTableData","tableName","asyncActions","types","getTable","then","response","normalizr_es","data","getAdminTableRow","rowId","getTableRow","test","console","log","r","react__WEBPACK_IMPORTED_MODULE_0__","_store_reducers__WEBPACK_IMPORTED_MODULE_1__","_store_actions_actions__WEBPACK_IMPORTED_MODULE_2__","react_redux__WEBPACK_IMPORTED_MODULE_3__","state","ownProps","_a","RowsRenderer","dispatch"],"mappings":"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","file":"26.bundle.js","sourcesContent":["function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\n/**\n * Helpers to enable Immutable compatibility *without* bringing in\n * the 'immutable' package as a dependency.\n */\n\n/**\n * Check if an object is immutable by checking if it has a key specific\n * to the immutable library.\n *\n * @param  {any} object\n * @return {bool}\n */\nfunction isImmutable(object) {\n  return !!(object && typeof object.hasOwnProperty === 'function' && (object.hasOwnProperty('__ownerID') || // Immutable.Map\n  object._map && object._map.hasOwnProperty('__ownerID'))); // Immutable.Record\n}\n/**\n * Denormalize an immutable entity.\n *\n * @param  {Schema} schema\n * @param  {Immutable.Map|Immutable.Record} input\n * @param  {function} unvisit\n * @param  {function} getDenormalizedEntity\n * @return {Immutable.Map|Immutable.Record}\n */\n\nfunction denormalizeImmutable(schema, input, unvisit) {\n  return Object.keys(schema).reduce(function (object, key) {\n    // Immutable maps cast keys to strings on write so we need to ensure\n    // we're accessing them using string keys.\n    var stringKey = \"\" + key;\n\n    if (object.has(stringKey)) {\n      return object.set(stringKey, unvisit(object.get(stringKey), schema[stringKey]));\n    } else {\n      return object;\n    }\n  }, input);\n}\n\nvar ImmutableUtils = /*#__PURE__*/Object.freeze({\n  isImmutable: isImmutable,\n  denormalizeImmutable: denormalizeImmutable\n});\n\nvar getDefaultGetId = function getDefaultGetId(idAttribute) {\n  return function (input) {\n    return isImmutable(input) ? input.get(idAttribute) : input[idAttribute];\n  };\n};\n\nvar EntitySchema =\n/*#__PURE__*/\nfunction () {\n  function EntitySchema(key, definition, options) {\n    if (definition === void 0) {\n      definition = {};\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!key || typeof key !== 'string') {\n      throw new Error(\"Expected a string key for Entity, but found \" + key + \".\");\n    }\n\n    var _options = options,\n        _options$idAttribute = _options.idAttribute,\n        idAttribute = _options$idAttribute === void 0 ? 'id' : _options$idAttribute,\n        _options$mergeStrateg = _options.mergeStrategy,\n        mergeStrategy = _options$mergeStrateg === void 0 ? function (entityA, entityB) {\n      return _objectSpread({}, entityA, entityB);\n    } : _options$mergeStrateg,\n        _options$processStrat = _options.processStrategy,\n        processStrategy = _options$processStrat === void 0 ? function (input) {\n      return _objectSpread({}, input);\n    } : _options$processStrat;\n    this._key = key;\n    this._getId = typeof idAttribute === 'function' ? idAttribute : getDefaultGetId(idAttribute);\n    this._idAttribute = idAttribute;\n    this._mergeStrategy = mergeStrategy;\n    this._processStrategy = processStrategy;\n    this.define(definition);\n  }\n\n  var _proto = EntitySchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = Object.keys(definition).reduce(function (entitySchema, key) {\n      var _objectSpread2;\n\n      var schema = definition[key];\n      return _objectSpread({}, entitySchema, (_objectSpread2 = {}, _objectSpread2[key] = schema, _objectSpread2));\n    }, this.schema || {});\n  };\n\n  _proto.getId = function getId(input, parent, key) {\n    return this._getId(input, parent, key);\n  };\n\n  _proto.merge = function merge(entityA, entityB) {\n    return this._mergeStrategy(entityA, entityB);\n  };\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    if (visitedEntities.some(function (entity) {\n      return entity === input;\n    })) {\n      return this.getId(input, parent, key);\n    }\n\n    visitedEntities.push(input);\n\n    var processedEntity = this._processStrategy(input, parent, key);\n\n    Object.keys(this.schema).forEach(function (key) {\n      if (processedEntity.hasOwnProperty(key) && typeof processedEntity[key] === 'object') {\n        var schema = _this.schema[key];\n        processedEntity[key] = visit(processedEntity[key], processedEntity, key, schema, addEntity, visitedEntities);\n      }\n    });\n    addEntity(this, processedEntity, input, parent, key);\n    return this.getId(input, parent, key);\n  };\n\n  _proto.denormalize = function denormalize(entity, unvisit) {\n    var _this2 = this;\n\n    if (isImmutable(entity)) {\n      return denormalizeImmutable(this.schema, entity, unvisit);\n    }\n\n    Object.keys(this.schema).forEach(function (key) {\n      if (entity.hasOwnProperty(key)) {\n        var schema = _this2.schema[key];\n        entity[key] = unvisit(entity[key], schema);\n      }\n    });\n    return entity;\n  };\n\n  _createClass(EntitySchema, [{\n    key: \"key\",\n    get: function get() {\n      return this._key;\n    }\n  }, {\n    key: \"idAttribute\",\n    get: function get() {\n      return this._idAttribute;\n    }\n  }]);\n\n  return EntitySchema;\n}();\n\nvar PolymorphicSchema =\n/*#__PURE__*/\nfunction () {\n  function PolymorphicSchema(definition, schemaAttribute) {\n    if (schemaAttribute) {\n      this._schemaAttribute = typeof schemaAttribute === 'string' ? function (input) {\n        return input[schemaAttribute];\n      } : schemaAttribute;\n    }\n\n    this.define(definition);\n  }\n\n  var _proto = PolymorphicSchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = definition;\n  };\n\n  _proto.getSchemaAttribute = function getSchemaAttribute(input, parent, key) {\n    return !this.isSingleSchema && this._schemaAttribute(input, parent, key);\n  };\n\n  _proto.inferSchema = function inferSchema(input, parent, key) {\n    if (this.isSingleSchema) {\n      return this.schema;\n    }\n\n    var attr = this.getSchemaAttribute(input, parent, key);\n    return this.schema[attr];\n  };\n\n  _proto.normalizeValue = function normalizeValue(value, parent, key, visit, addEntity, visitedEntities) {\n    var schema = this.inferSchema(value, parent, key);\n\n    if (!schema) {\n      return value;\n    }\n\n    var normalizedValue = visit(value, parent, key, schema, addEntity, visitedEntities);\n    return this.isSingleSchema || normalizedValue === undefined || normalizedValue === null ? normalizedValue : {\n      id: normalizedValue,\n      schema: this.getSchemaAttribute(value, parent, key)\n    };\n  };\n\n  _proto.denormalizeValue = function denormalizeValue(value, unvisit) {\n    var schemaKey = isImmutable(value) ? value.get('schema') : value.schema;\n\n    if (!this.isSingleSchema && !schemaKey) {\n      return value;\n    }\n\n    var id = isImmutable(value) ? value.get('id') : value.id;\n    var schema = this.isSingleSchema ? this.schema : this.schema[schemaKey];\n    return unvisit(id || value, schema);\n  };\n\n  _createClass(PolymorphicSchema, [{\n    key: \"isSingleSchema\",\n    get: function get() {\n      return !this._schemaAttribute;\n    }\n  }]);\n\n  return PolymorphicSchema;\n}();\n\nvar UnionSchema =\n/*#__PURE__*/\nfunction (_PolymorphicSchema) {\n  _inheritsLoose(UnionSchema, _PolymorphicSchema);\n\n  function UnionSchema(definition, schemaAttribute) {\n    if (!schemaAttribute) {\n      throw new Error('Expected option \"schemaAttribute\" not found on UnionSchema.');\n    }\n\n    return _PolymorphicSchema.call(this, definition, schemaAttribute) || this;\n  }\n\n  var _proto = UnionSchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    return this.normalizeValue(input, parent, key, visit, addEntity, visitedEntities);\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    return this.denormalizeValue(input, unvisit);\n  };\n\n  return UnionSchema;\n}(PolymorphicSchema);\n\nvar ValuesSchema =\n/*#__PURE__*/\nfunction (_PolymorphicSchema) {\n  _inheritsLoose(ValuesSchema, _PolymorphicSchema);\n\n  function ValuesSchema() {\n    return _PolymorphicSchema.apply(this, arguments) || this;\n  }\n\n  var _proto = ValuesSchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    return Object.keys(input).reduce(function (output, key, index) {\n      var _objectSpread2;\n\n      var value = input[key];\n      return value !== undefined && value !== null ? _objectSpread({}, output, (_objectSpread2 = {}, _objectSpread2[key] = _this.normalizeValue(value, input, key, visit, addEntity, visitedEntities), _objectSpread2)) : output;\n    }, {});\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    var _this2 = this;\n\n    return Object.keys(input).reduce(function (output, key) {\n      var _objectSpread3;\n\n      var entityOrId = input[key];\n      return _objectSpread({}, output, (_objectSpread3 = {}, _objectSpread3[key] = _this2.denormalizeValue(entityOrId, unvisit), _objectSpread3));\n    }, {});\n  };\n\n  return ValuesSchema;\n}(PolymorphicSchema);\n\nvar validateSchema = function validateSchema(definition) {\n  var isArray = Array.isArray(definition);\n\n  if (isArray && definition.length > 1) {\n    throw new Error(\"Expected schema definition to be a single schema, but found \" + definition.length + \".\");\n  }\n\n  return definition[0];\n};\n\nvar getValues = function getValues(input) {\n  return Array.isArray(input) ? input : Object.keys(input).map(function (key) {\n    return input[key];\n  });\n};\n\nvar normalize = function normalize(schema, input, parent, key, visit, addEntity, visitedEntities) {\n  schema = validateSchema(schema);\n  var values = getValues(input); // Special case: Arrays pass *their* parent on to their children, since there\n  // is not any special information that can be gathered from themselves directly\n\n  return values.map(function (value, index) {\n    return visit(value, parent, key, schema, addEntity, visitedEntities);\n  });\n};\nvar denormalize = function denormalize(schema, input, unvisit) {\n  schema = validateSchema(schema);\n  return input && input.map ? input.map(function (entityOrId) {\n    return unvisit(entityOrId, schema);\n  }) : input;\n};\n\nvar ArraySchema =\n/*#__PURE__*/\nfunction (_PolymorphicSchema) {\n  _inheritsLoose(ArraySchema, _PolymorphicSchema);\n\n  function ArraySchema() {\n    return _PolymorphicSchema.apply(this, arguments) || this;\n  }\n\n  var _proto = ArraySchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    var values = getValues(input);\n    return values.map(function (value, index) {\n      return _this.normalizeValue(value, parent, key, visit, addEntity, visitedEntities);\n    }).filter(function (value) {\n      return value !== undefined && value !== null;\n    });\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    var _this2 = this;\n\n    return input && input.map ? input.map(function (value) {\n      return _this2.denormalizeValue(value, unvisit);\n    }) : input;\n  };\n\n  return ArraySchema;\n}(PolymorphicSchema);\n\nvar _normalize = function normalize(schema, input, parent, key, visit, addEntity, visitedEntities) {\n  var object = _objectSpread({}, input);\n\n  Object.keys(schema).forEach(function (key) {\n    var localSchema = schema[key];\n    var value = visit(input[key], input, key, localSchema, addEntity, visitedEntities);\n\n    if (value === undefined || value === null) {\n      delete object[key];\n    } else {\n      object[key] = value;\n    }\n  });\n  return object;\n};\n\nvar _denormalize = function denormalize(schema, input, unvisit) {\n  if (isImmutable(input)) {\n    return denormalizeImmutable(schema, input, unvisit);\n  }\n\n  var object = _objectSpread({}, input);\n\n  Object.keys(schema).forEach(function (key) {\n    if (object[key] != null) {\n      object[key] = unvisit(object[key], schema[key]);\n    }\n  });\n  return object;\n};\n\nvar ObjectSchema =\n/*#__PURE__*/\nfunction () {\n  function ObjectSchema(definition) {\n    this.define(definition);\n  }\n\n  var _proto = ObjectSchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = Object.keys(definition).reduce(function (entitySchema, key) {\n      var _objectSpread2;\n\n      var schema = definition[key];\n      return _objectSpread({}, entitySchema, (_objectSpread2 = {}, _objectSpread2[key] = schema, _objectSpread2));\n    }, this.schema || {});\n  };\n\n  _proto.normalize = function normalize() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _normalize.apply(void 0, [this.schema].concat(args));\n  };\n\n  _proto.denormalize = function denormalize() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _denormalize.apply(void 0, [this.schema].concat(args));\n  };\n\n  return ObjectSchema;\n}();\n\nvar visit = function visit(value, parent, key, schema, addEntity, visitedEntities) {\n  if (typeof value !== 'object' || !value) {\n    return value;\n  }\n\n  if (typeof schema === 'object' && (!schema.normalize || typeof schema.normalize !== 'function')) {\n    var method = Array.isArray(schema) ? normalize : _normalize;\n    return method(schema, value, parent, key, visit, addEntity, visitedEntities);\n  }\n\n  return schema.normalize(value, parent, key, visit, addEntity, visitedEntities);\n};\n\nvar addEntities = function addEntities(entities) {\n  return function (schema, processedEntity, value, parent, key) {\n    var schemaKey = schema.key;\n    var id = schema.getId(value, parent, key);\n\n    if (!(schemaKey in entities)) {\n      entities[schemaKey] = {};\n    }\n\n    var existingEntity = entities[schemaKey][id];\n\n    if (existingEntity) {\n      entities[schemaKey][id] = schema.merge(existingEntity, processedEntity);\n    } else {\n      entities[schemaKey][id] = processedEntity;\n    }\n  };\n};\n\nvar schema = {\n  Array: ArraySchema,\n  Entity: EntitySchema,\n  Object: ObjectSchema,\n  Union: UnionSchema,\n  Values: ValuesSchema\n};\nvar normalize$1 = function normalize(input, schema) {\n  if (!input || typeof input !== 'object') {\n    throw new Error(\"Unexpected input given to normalize. Expected type to be \\\"object\\\", found \\\"\" + typeof input + \"\\\".\");\n  }\n\n  var entities = {};\n  var addEntity = addEntities(entities);\n  var visitedEntities = [];\n  var result = visit(input, input, null, schema, addEntity, visitedEntities);\n  return {\n    entities: entities,\n    result: result\n  };\n};\n\nvar unvisitEntity = function unvisitEntity(id, schema, unvisit, getEntity, cache) {\n  var entity = getEntity(id, schema);\n\n  if (typeof entity !== 'object' || entity === null) {\n    return entity;\n  }\n\n  if (!cache[schema.key]) {\n    cache[schema.key] = {};\n  }\n\n  if (!cache[schema.key][id]) {\n    // Ensure we don't mutate it non-immutable objects\n    var entityCopy = isImmutable(entity) ? entity : _objectSpread({}, entity); // Need to set this first so that if it is referenced further within the\n    // denormalization the reference will already exist.\n\n    cache[schema.key][id] = entityCopy;\n    cache[schema.key][id] = schema.denormalize(entityCopy, unvisit);\n  }\n\n  return cache[schema.key][id];\n};\n\nvar getUnvisit = function getUnvisit(entities) {\n  var cache = {};\n  var getEntity = getEntities(entities);\n  return function unvisit(input, schema) {\n    if (typeof schema === 'object' && (!schema.denormalize || typeof schema.denormalize !== 'function')) {\n      var method = Array.isArray(schema) ? denormalize : _denormalize;\n      return method(schema, input, unvisit);\n    }\n\n    if (input === undefined || input === null) {\n      return input;\n    }\n\n    if (schema instanceof EntitySchema) {\n      return unvisitEntity(input, schema, unvisit, getEntity, cache);\n    }\n\n    return schema.denormalize(input, unvisit);\n  };\n};\n\nvar getEntities = function getEntities(entities) {\n  var isImmutable$1 = isImmutable(entities);\n  return function (entityOrId, schema) {\n    var schemaKey = schema.key;\n\n    if (typeof entityOrId === 'object') {\n      return entityOrId;\n    }\n\n    return isImmutable$1 ? entities.getIn([schemaKey, entityOrId.toString()]) : entities[schemaKey][entityOrId];\n  };\n};\n\nvar denormalize$1 = function denormalize(input, schema, entities) {\n  if (typeof input !== 'undefined') {\n    return getUnvisit(entities)(input, schema);\n  }\n};\n\nexport { denormalize$1 as denormalize, normalize$1 as normalize, schema };\n","import {NormalizedSchema, schema} from 'normalizr';\n\nexport const header = new schema.Entity('headers', {}, {idAttribute: '_id'});\nexport const headers = new schema.Array(header);\nexport const tableHeaders = new schema.Entity('table', {\n    headers: headers\n}, {idAttribute: 'name'});\n\nexport const cell = new schema.Entity('cells', {type: header}, {idAttribute: '_id'});\nexport const cells = new schema.Array(cell);\n\nexport const row = new schema.Entity('rows', {cells: cells}, {idAttribute: '_id'})\nexport const rows = new schema.Array(row);\nexport const tableRows = new schema.Entity('table', {\n    rows: rows\n}, {idAttribute: 'name'});\n\nexport const table = new schema.Entity('table', {\n    rows: rows,\n    cells: cells,\n    headers: headers\n}, {idAttribute: 'name'});\n\n\nexport interface TableEntities {\n    table: any,\n    rows: any[],\n    cells: any[],\n    headers: any[]\n}\n\nexport interface HeadersEntities {\n    table: any,\n    headers: any[]\n}\n\nexport interface RowsEntities {\n    table: any,\n    rows: any[]\n}\n\nexport interface NormalizedTableResponse extends NormalizedSchema<TableEntities, any[]> {\n}\n\nexport interface NormalizedTableHeadersResponse extends NormalizedSchema<HeadersEntities, any[]> {\n}\n\nexport interface NormalizedTableRowsResponse extends NormalizedSchema<RowsEntities, any[]> {\n}\n","import axios from 'axios';\n\nconst clientApi = axios.create({\n    baseURL: window.location.origin\n});\n\n// MODULE TABLE\nconst MODULE_TABLE_DOMAIN = 'tables';\n\nexport function getTable(tableName: string): Promise<any> {\n    return clientApi.get(`/api/${MODULE_TABLE_DOMAIN}/${tableName}`);\n}\n\nexport function getTableRow(tableName: string, rowId: string) {\n    return clientApi.get(`/api/${MODULE_TABLE_DOMAIN}/${tableName}/rows/${rowId}`);\n}\n","import * as api from '../../service/api';\nimport {asyncActionCreator} from '../../../../../utilities/asyncActions';\nimport {GET_ADMIN_TABLE_ROWS_DATA, GET_ADMIN_TABLE_ROW_DATA} from './types';\nimport {NormalizedTableResponse, table} from '../../../../../modules/table/schema/table';\nimport {normalize} from 'normalizr';\n\nexport function getAdminTableData(tableName: string) {\n    return asyncActionCreator<typeof GET_ADMIN_TABLE_ROWS_DATA, NormalizedTableResponse, any>(\n        GET_ADMIN_TABLE_ROWS_DATA,\n        api.getTable(tableName)\n            .then(response => {\n                return normalize(response.data, table);\n            }),\n        {tableName}\n    );\n}\n\nexport function getAdminTableRow(tableName:string, rowId:string) {\n    return asyncActionCreator<typeof GET_ADMIN_TABLE_ROW_DATA, NormalizedTableResponse, any>(\n        GET_ADMIN_TABLE_ROW_DATA,\n        api.getTableRow(tableName, rowId)\n            .then(response => {\n                const test = normalize(response.data, table);\n                console.log('TEST', test);\n                return test;\n            }),\n        {tableName}\n    );\n}\n","import * as React from 'react';\nimport {useEffect} from 'react';\nimport * as fromAdminTableData from '../../../../store/reducers';\nimport {getAdminTableData} from '../store/actions/actions'\nimport {connect} from 'react-redux';\n\nconst AdminTableEntityRows =  ({RowsRenderer, dispatch, tableName, rows}: any) => {\n    useEffect(() => {\n        dispatch(getAdminTableData(tableName));\n    }, [tableName]);\n\n    console.log('TABLE NAME', tableName);\n    return <RowsRenderer rows={rows} tableName={tableName}/>\n};\n\nconst mapStateToProps = (state:any, ownProps:any) => {\n    return {\n        rows: fromAdminTableData.getAdminTableRowsData(state, ownProps.tableName),\n        tableName: ownProps.tableName\n    }\n};\n\nexport default connect(mapStateToProps)(AdminTableEntityRows);\n"],"sourceRoot":""}