{"version":3,"sources":["webpack:///./src/modules/ordered-call/store/actions/types.tsx","webpack:///./src/modules/ordered-call/store/reducers/orderedCalls.tsx","webpack:///./src/modules/ordered-call/store/reducers/index.tsx"],"names":["__webpack_require__","d","__webpack_exports__","GET_ORDERED_CALLS","requestOrderedCalls","state","action","concat","payload","reducers_orderedCalls","type","types","status","asyncActions","SUCCEEDED","reducers_getOrderedCalls","reducers_getGroupedOrderedCalls","rootReducer","Object","redux","orderedCalls","getOrderedCalls","constants","reduce","memo","orderedCall","__assign","_a","getGroupedOrderedCalls"],"mappings":"2FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAO,IAAMA,EAAoB,ySCyB3BC,EAAsB,SAACC,EAAsBC,GAC/C,OAAOD,EAAME,OAAOD,EAAOE,UAGhBC,EAhBqD,SAACJ,EAAYC,GAC7E,QADiE,IAAAD,MAAA,IAC7DC,EAAOI,OAASC,EAAA,EAChB,OAAQL,EAAOM,QACX,KAAKC,EAAA,EAAkBC,UACnB,OAAOV,EAAoBC,EAAOC,GACtC,QACI,OAAOD,EAGnB,OAAOA,YCtBXL,EAAAC,EAAAC,EAAA,oCAAAa,IAAAf,EAAAC,EAAAC,EAAA,2CAAAc,IAKA,IAAMC,EAAcC,OAAAC,EAAA,gBAAAD,CAAgB,CAChCE,aAAYX,IAOHM,GAJEb,EAAA,UAIgB,SAACG,GAC5B,ODmB2B,SAACA,GAC5B,OAAOA,ECpBPgB,CAAiChB,EAAMiB,EAAA,GAAaF,gBAE3CJ,EAAyB,SAACX,GACnC,ODoBkC,SAACA,GACnC,OAAOA,EAAMkB,OAAO,SAACC,EAAWC,SAAgB,OAAAC,EAAA,GACzCF,IAAIG,EAAA,IACNF,EAAYb,SAAUY,EAAKC,EAAYb,SAAW,IAAIL,OAAOkB,GAAYE,KAC1E,ICxBJC,CAAwCvB,EAAMiB,EAAA,GAAaF","file":"29.bundle.js","sourcesContent":["export const GET_ORDERED_CALLS = 'GET_ORDERED_CALLS';\n","import {Reducer} from 'redux';\nimport {AsyncAction, AsyncActionStatus, SucceededAsyncAction} from '../../../../utilities/asyncActions';\n\n\nimport {GET_ORDERED_CALLS} from '../actions/types';\nimport {OrderedCall} from '../../schema/orderedCall';\nimport {NormalizedTableResponse} from '../../../table/schema/table';\nimport {Params} from '../../../table/store/actions/actions';\nimport {act} from 'react-dom/test-utils';\n\n\ntype GetOrderedCallsActionSuccess = SucceededAsyncAction<typeof GET_ORDERED_CALLS, OrderedCall[], Params>;\n\nconst orderedCalls: Reducer<OrderedCall[], AsyncAction<any, any>> = (state = [], action) => {\n    if (action.type === GET_ORDERED_CALLS) {\n        switch (action.status) {\n            case AsyncActionStatus.SUCCEEDED:\n                return requestOrderedCalls(state, action as GetOrderedCallsActionSuccess);\n            default:\n                return state;\n        }\n    }\n    return state;\n};\n\nconst requestOrderedCalls = (state: OrderedCall[], action: GetOrderedCallsActionSuccess):OrderedCall[] => {\n    return state.concat(action.payload);\n};\n\nexport default orderedCalls;\n\n\n//selectors\nexport const getOrderedCalls = (state: any) => {\n    return state;\n};\n\nexport const getGroupedOrderedCalls = (state: OrderedCall[]) => {\n    return state.reduce((memo: any, orderedCall) => ({\n        ...memo,\n        [orderedCall.status]: (memo[orderedCall.status] || []).concat(orderedCall)\n    }), {});\n};\n","import {combineReducers} from 'redux';\n\nimport orderedCalls, * as fromOrderedCalls from './orderedCalls';\nimport {MODULE_NAME} from '../../constants';\n\nconst rootReducer = combineReducers({\n    orderedCalls\n});\n\nexport default rootReducer;\n\n\n// selectors\nexport const getOrderedCalls = (state: any) =>\n    fromOrderedCalls.getOrderedCalls(state[MODULE_NAME].orderedCalls);\n\nexport const getGroupedOrderedCalls = (state: any) =>\n    fromOrderedCalls.getGroupedOrderedCalls(state[MODULE_NAME].orderedCalls);\n\n"],"sourceRoot":""}